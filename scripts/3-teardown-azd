#!/bin/bash

# Teardown Azure Developer CLI (azd) Script
# Clean up script for AI agents lab

set -e  # Exit on any error

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

# Function to ask for user confirmation
confirm() {
    while true; do
        read -p "$1 (y/n): " yn
        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Please answer yes (y) or no (n).";;
        esac
    done
}

# ---------------------
# Check Prerequisites
# ---------------------

echo "→ Starting teardown process..."

# Check if azd is installed
if ! command -v azd >/dev/null 2>&1; then
    print_error "Azure Developer CLI (azd) is not installed"
    exit 1
fi

# Check if .azd-setup directory exists
if [ ! -d ".azd-setup" ]; then
    print_warning ".azd-setup directory not found - nothing to clean up"
    azd_directory_exists=false
else
    azd_directory_exists=true
fi

# ---------------------
# Check for Deployment and Run azd down --purge
# ---------------------

if [ "$azd_directory_exists" = true ]; then
    cd .azd-setup

    # Check if there was a deployment by looking for .azure directory AND environment folders with .env files
    deployment_found=false

    if [ -d ".azure" ]; then
        print_info "Found .azure directory, checking for environment configurations..."
        
        # Look for environment subfolders with .env files containing resource group definitions
        for env_dir in .azure/*/; do
            if [ -d "$env_dir" ]; then
                env_name=$(basename "$env_dir")
                env_file="$env_dir/.env"
                
                if [ -f "$env_file" ]; then
                    # Check if the .env file contains a resource group definition
                    if grep -q "AZURE_RESOURCE_GROUP" "$env_file" || grep -q "resourceGroup" "$env_file"; then
                        print_info "Found deployment environment: $env_name with resource group configuration"
                        deployment_found=true
                        break
                    fi
                fi
            fi
        done
        
        if [ "$deployment_found" = true ]; then
            echo "→ Deployment detected - cleaning up Azure resources..."
            
            print_info "Running 'azd down --purge' to remove all Azure resources..."
            print_warning "This will permanently delete all deployed resources!"

            if azd down --purge; then
                print_success "Azure resources cleaned up successfully"
            else
                print_error "Failed to clean up Azure resources"
                print_warning "You may need to manually clean up resources in the Azure portal"
            fi
        else
            print_info "No active deployment found (no environment with resource group configuration)"
            print_success "No Azure resources to clean up"
        fi
    else
        print_info "No deployment found (.azure directory not present)"
        print_success "No Azure resources to clean up"
    fi

    cd ..

    # ---------------------
    # Confirm Directory Deletion
    # ---------------------

    echo "→ Directory detected - starting cleanup"
    print_warning "The .azd-setup directory contains local configuration and state files."

    if confirm "Do you want to delete the .azd-setup directory?"; then
        rm -rf .azd-setup
        print_success "Deleted .azd-setup directory"
        echo ""
        print_success "Teardown complete! All resources and local files have been removed."
    else
        print_info "Keeping .azd-setup directory with local configuration"
        echo ""
        print_success "Teardown complete! Azure resources removed, local files preserved."
    fi
fi

# ---------------------
# Logout from Azure CLI and Azure Developer CLI
# ---------------------

echo "→ Logging out from Azure CLI and Azure Developer CLI..."

# Logout from Azure CLI
if command -v az >/dev/null 2>&1; then
    print_info "Logging out from Azure CLI..."
    if az logout >/dev/null 2>&1; then
        print_success "Successfully logged out from Azure CLI"
    else
        print_warning "Failed to logout from Azure CLI or already logged out"
    fi
else
    print_warning "Azure CLI not found - skipping logout"
fi

# Logout from Azure Developer CLI
if command -v azd >/dev/null 2>&1; then
    print_info "Logging out from Azure Developer CLI..."
    if azd auth logout >/dev/null 2>&1; then
        print_success "Successfully logged out from Azure Developer CLI"
    else
        print_warning "Failed to logout from Azure Developer CLI or already logged out"
    fi
else
    print_warning "Azure Developer CLI not found - skipping logout"
fi

echo ""
print_success "Complete teardown finished! All resources removed and logged out from Azure services."