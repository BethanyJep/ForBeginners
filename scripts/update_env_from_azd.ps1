# Script to populate .env file based on .env.sample and azd environment values
# This script maps the variables from .env.sample to their corresponding azd output values

$ErrorActionPreference = "Stop"

# Define paths
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$EnvSampleFile = Join-Path $ScriptDir ".env.sample"
$EnvFile = Join-Path $ScriptDir ".env"

Write-Host "=================================================="
Write-Host "Updating .env file from Azure deployment outputs"
Write-Host "=================================================="

# Check if .env.sample exists
if (-not (Test-Path $EnvSampleFile)) {
    Write-Error "ERROR: .env.sample file not found at $EnvSampleFile"
    exit 1
}

# Function to get azd environment value safely
function Get-AzdValue {
    param([string]$Key)
    try {
        $value = azd env get-value $Key 2>$null
        if ($LASTEXITCODE -eq 0) {
            return $value
        }
    }
    catch {
        # Silently handle errors
    }
    return ""
}

# Function to construct endpoint URL
function Get-OpenAIEndpoint {
    $resourceId = Get-AzdValue "AZURE_AI_PROJECT_RESOURCE_ID"
    if ($resourceId) {
        $endpoint = Get-AzdValue "AZURE_AI_PROJECT_ENDPOINT"
        if ($endpoint) {
            return $endpoint
        }
        else {
            $aiServicesName = Get-AzdValue "AZURE_OPENAI_MODEL"
            $location = Get-AzdValue "AZURE_LOCATION"
            if ($aiServicesName -and $location) {
                return "https://$aiServicesName.openai.azure.com/"
            }
        }
    }
    return ""
}

# Function to get Azure OpenAI API key from Azure
function Get-OpenAIApiKey {
    $aiServicesName = Get-AzdValue "AZURE_OPENAI_MODEL"
    $resourceGroup = Get-AzdValue "AZURE_RESOURCE_GROUP"
    
    if ($aiServicesName -and $resourceGroup) {
        try {
            Write-Host "  → Retrieving Azure OpenAI API key..." -ForegroundColor Cyan
            $keys = az cognitiveservices account keys list --name $aiServicesName --resource-group $resourceGroup 2>$null | ConvertFrom-Json
            if ($keys -and $keys.key1) {
                return $keys.key1
            }
        }
        catch {
            Write-Host "  ⚠ Failed to retrieve OpenAI API key: $($_.Exception.Message)" -ForegroundColor Yellow
        }
    }
    return ""
}

# Function to get Azure AI Search API key from Azure
function Get-SearchApiKey {
    $searchEndpoint = Get-AzdValue "AZURE_SEARCH_SERVICE_ENDPOINT"
    $resourceGroup = Get-AzdValue "AZURE_RESOURCE_GROUP"
    
    if ($searchEndpoint -and $resourceGroup) {
        # Extract search service name from endpoint
        $searchServiceName = ($searchEndpoint -replace "https://", "" -replace "\.search\.windows\.net.*", "")
        
        if ($searchServiceName) {
            try {
                Write-Host "  → Retrieving Azure AI Search API key..." -ForegroundColor Cyan
                $keys = az search admin-key show --service-name $searchServiceName --resource-group $resourceGroup 2>$null | ConvertFrom-Json
                if ($keys -and $keys.primaryKey) {
                    return $keys.primaryKey
                }
            }
            catch {
                Write-Host "  ⚠ Failed to retrieve Search API key: $($_.Exception.Message)" -ForegroundColor Yellow
            }
        }
    }
    return ""
}

# Mapping of .env.sample variables to azd output values
$VarMapping = @{
    "AZURE_SUBSCRIPTION_ID"     = "AZURE_SUBSCRIPTION_ID"
    "AZURE_RESOURCE_GROUP"      = "AZURE_RESOURCE_GROUP"
    "AZURE_OPENAI_API_KEY"      = "CUSTOM:Get-OpenAIApiKey"
    "AZURE_OPENAI_ENDPOINT"     = "CUSTOM:Get-OpenAIEndpoint"
    "AZURE_OPENAI_API_VERSION"  = "STATIC:2025-02-01-preview"
    "AZURE_AI_FOUNDRY_NAME"     = "AZURE_OPENAI_MODEL"
    "AZURE_AI_PROJECT_NAME"     = "AZURE_AI_PROJECT_RESOURCE_ID"
    "AZURE_OPENAI_DEPLOYMENT"   = "AZURE_OPENAI_CHAT_DEPLOYMENT_NAME"
    "AZURE_OPENAI_MODEL_VERSION" = "STATIC:2024-07-18"  # From agentModelVersion parameter
    "AZURE_AISEARCH_ENDPOINT"   = "AZURE_SEARCH_SERVICE_ENDPOINT"
    "AZURE_AISEARCH_API_KEY"    = "CUSTOM:Get-SearchApiKey"
    "AZURE_AISEARCH_INDEX"      = "AZURE_SEARCH_INDEX_NAME"
}

Write-Host "Reading variables from .env.sample..."

# Create or clear the .env file
"" | Out-File -FilePath $EnvFile -Encoding UTF8
"# Generated by update_env_from_azd.ps1 on $(Get-Date)" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
"# Based on .env.sample template" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
"" | Out-File -FilePath $EnvFile -Append -Encoding UTF8

# Read .env.sample line by line
Get-Content $EnvSampleFile | ForEach-Object {
    $line = $_
    
    # Preserve comments and empty lines
    if ($line -match '^\s*#' -or $line -match '^\s*$') {
        $line | Out-File -FilePath $EnvFile -Append -Encoding UTF8
        return
    }
    
    # Extract variable name (before =)
    if ($line -match '^([A-Z_][A-Z0-9_]*)=') {
        $varName = $Matches[1]
        
        # Check if we have a mapping for this variable
        if ($VarMapping.ContainsKey($varName)) {
            $mapping = $VarMapping[$varName]
            
            if ($mapping -like "STATIC:*") {
                # Static value
                $value = $mapping.Substring(7)
                "$varName=$value" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
                Write-Host "  ✓ $varName = $value (static)" -ForegroundColor Green
                
            }
            elseif ($mapping -like "CUSTOM:*") {
                # Custom function
                $funcName = $mapping.Substring(7)
                $value = & $funcName
                "$varName=$value" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
                Write-Host "  ✓ $varName = $value (custom)" -ForegroundColor Green
                
            }
            elseif ($mapping) {
                # Get from azd environment
                $value = Get-AzdValue $mapping
                "$varName=$value" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
                if ($value) {
                    Write-Host "  ✓ $varName = $value" -ForegroundColor Green
                }
                else {
                    Write-Host "  ⚠ $varName = (empty - not found in azd outputs)" -ForegroundColor Yellow
                }
                
            }
            else {
                # No mapping - leave empty with note
                "$varName=" | Out-File -FilePath $EnvFile -Append -Encoding UTF8
                Write-Host "  ⚠ $varName = (requires manual entry)" -ForegroundColor Yellow
            }
        }
        else {
            # No mapping defined - preserve the line as-is
            $line | Out-File -FilePath $EnvFile -Append -Encoding UTF8
            Write-Host "  ℹ $varName (preserved from sample)" -ForegroundColor Cyan
        }
    }
    else {
        # Line doesn't match expected format, preserve it
        $line | Out-File -FilePath $EnvFile -Append -Encoding UTF8
    }
}

Write-Host ""
Write-Host "=================================================="
Write-Host "✓ .env file created at: $EnvFile" -ForegroundColor Green
Write-Host ""
Write-Host "ℹ API keys retrieved automatically from Azure" -ForegroundColor Cyan
Write-Host "  If you prefer to use Managed Identity instead," -ForegroundColor Cyan
Write-Host "  you can remove the *_API_KEY variables from .env" -ForegroundColor Cyan
Write-Host "=================================================="

exit 0
