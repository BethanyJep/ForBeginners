#!/bin/bash

# Script to populate .env file based on .env.sample and azd environment values
# This script maps the variables from .env.sample to their corresponding azd output values

set -e

# Define paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ENV_SAMPLE_FILE="$SCRIPT_DIR/.env.sample"
ENV_FILE="$SCRIPT_DIR/.env"

echo "=================================================="
echo "Updating .env file from Azure deployment outputs"
echo "=================================================="

# Check if .env.sample exists
if [ ! -f "$ENV_SAMPLE_FILE" ]; then
    echo "ERROR: .env.sample file not found at $ENV_SAMPLE_FILE"
    exit 1
fi

# Create or clear the .env file
> "$ENV_FILE"

echo "Reading variables from .env.sample..."

# Function to get azd environment value safely
get_azd_value() {
    local key=$1
    local value=$(azd env get-value "$key" 2>/dev/null || echo "")
    echo "$value"
}

# Function to construct endpoint URL
get_openai_endpoint() {
    local resource_id=$(get_azd_value "AZURE_AI_PROJECT_RESOURCE_ID")
    if [ -n "$resource_id" ]; then
        # Extract the AI Services name from the resource ID or use the direct endpoint
        local endpoint=$(get_azd_value "AZURE_AI_PROJECT_ENDPOINT")
        if [ -n "$endpoint" ]; then
            echo "$endpoint"
        else
            local ai_services_name=$(get_azd_value "AZURE_OPENAI_MODEL")
            local location=$(get_azd_value "AZURE_LOCATION")
            if [ -n "$ai_services_name" ] && [ -n "$location" ]; then
                echo "https://${ai_services_name}.openai.azure.com/"
            fi
        fi
    fi
}

# Function to get Azure OpenAI API key from Azure
get_openai_api_key() {
    local ai_services_name=$(get_azd_value "AZURE_OPENAI_MODEL")
    local resource_group=$(get_azd_value "AZURE_RESOURCE_GROUP")
    
    if [ -n "$ai_services_name" ] && [ -n "$resource_group" ]; then
        echo "  → Retrieving Azure OpenAI API key..." >&2
        local keys=$(az cognitiveservices account keys list --name "$ai_services_name" --resource-group "$resource_group" 2>/dev/null)
        if [ $? -eq 0 ]; then
            local key=$(echo "$keys" | grep -o '"key1": *"[^"]*"' | sed 's/"key1": *"\([^"]*\)"/\1/')
            if [ -n "$key" ]; then
                echo "$key"
                return
            fi
        fi
        echo "  ⚠ Failed to retrieve OpenAI API key" >&2
    fi
    echo ""
}

# Function to get Azure AI Search API key from Azure
get_search_api_key() {
    local search_endpoint=$(get_azd_value "AZURE_SEARCH_SERVICE_ENDPOINT")
    local resource_group=$(get_azd_value "AZURE_RESOURCE_GROUP")
    
    if [ -n "$search_endpoint" ] && [ -n "$resource_group" ]; then
        # Extract search service name from endpoint
        local search_service_name=$(echo "$search_endpoint" | sed 's|https://||' | sed 's|\.search\.windows\.net.*||')
        
        if [ -n "$search_service_name" ]; then
            echo "  → Retrieving Azure AI Search API key..." >&2
            local keys=$(az search admin-key show --service-name "$search_service_name" --resource-group "$resource_group" 2>/dev/null)
            if [ $? -eq 0 ]; then
                local key=$(echo "$keys" | grep -o '"primaryKey": *"[^"]*"' | sed 's/"primaryKey": *"\([^"]*\)"/\1/')
                if [ -n "$key" ]; then
                    echo "$key"
                    return
                fi
            fi
            echo "  ⚠ Failed to retrieve Search API key" >&2
        fi
    fi
    echo ""
}

# Mapping of .env.sample variables to azd output values
declare -A VAR_MAPPING=(
    ["AZURE_SUBSCRIPTION_ID"]="AZURE_SUBSCRIPTION_ID"
    ["AZURE_RESOURCE_GROUP"]="AZURE_RESOURCE_GROUP"
    ["AZURE_OPENAI_API_KEY"]="CUSTOM:get_openai_api_key"
    ["AZURE_OPENAI_ENDPOINT"]="CUSTOM:get_openai_endpoint"
    ["AZURE_OPENAI_API_VERSION"]="STATIC:2025-02-01-preview"
    ["AZURE_AI_FOUNDRY_NAME"]="AZURE_OPENAI_MODEL"
    ["AZURE_AI_PROJECT_NAME"]="AZURE_AI_PROJECT_RESOURCE_ID"
    ["AZURE_OPENAI_DEPLOYMENT"]="AZURE_OPENAI_CHAT_DEPLOYMENT_NAME"
    ["AZURE_OPENAI_MODEL_VERSION"]="STATIC:2024-07-18"  # From agentModelVersion parameter
    ["AZURE_AISEARCH_ENDPOINT"]="AZURE_SEARCH_SERVICE_ENDPOINT"
    ["AZURE_AISEARCH_API_KEY"]="CUSTOM:get_search_api_key"
    ["AZURE_AISEARCH_INDEX"]="AZURE_SEARCH_INDEX_NAME"
)

echo "" >> "$ENV_FILE"
echo "# Generated by update_env_from_azd.sh on $(date)" >> "$ENV_FILE"
echo "# Based on .env.sample template" >> "$ENV_FILE"
echo "" >> "$ENV_FILE"

# Read .env.sample line by line
while IFS= read -r line || [ -n "$line" ]; do
    # Preserve comments and empty lines
    if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "${line// }" ]]; then
        echo "$line" >> "$ENV_FILE"
        continue
    fi
    
    # Extract variable name (before =)
    if [[ "$line" =~ ^([A-Z_][A-Z0-9_]*)= ]]; then
        var_name="${BASH_REMATCH[1]}"
        
        # Check if we have a mapping for this variable
        if [[ -v VAR_MAPPING["$var_name"] ]]; then
            mapping="${VAR_MAPPING[$var_name]}"
            
            if [[ "$mapping" == STATIC:* ]]; then
                # Static value
                value="${mapping#STATIC:}"
                echo "$var_name=$value" >> "$ENV_FILE"
                echo "  ✓ $var_name = $value (static)"
                
            elif [[ "$mapping" == CUSTOM:* ]]; then
                # Custom function
                func_name="${mapping#CUSTOM:}"
                value=$($func_name)
                echo "$var_name=$value" >> "$ENV_FILE"
                echo "  ✓ $var_name = $value (custom)"
                
            elif [[ -n "$mapping" ]]; then
                # Get from azd environment
                value=$(get_azd_value "$mapping")
                echo "$var_name=$value" >> "$ENV_FILE"
                if [ -n "$value" ]; then
                    echo "  ✓ $var_name = $value"
                else
                    echo "  ⚠ $var_name = (empty - not found in azd outputs)"
                fi
                
            else
                # No mapping - leave empty with note
                echo "$var_name=" >> "$ENV_FILE"
                echo "  ⚠ $var_name = (requires manual entry)"
            fi
        else
            # No mapping defined - preserve the line as-is
            echo "$line" >> "$ENV_FILE"
            echo "  ℹ $var_name (preserved from sample)"
        fi
    else
        # Line doesn't match expected format, preserve it
        echo "$line" >> "$ENV_FILE"
    fi
done < "$ENV_SAMPLE_FILE"

echo ""
echo "=================================================="
echo "✓ .env file created at: $ENV_FILE"
echo ""
echo "ℹ API keys retrieved automatically from Azure"
echo "  If you prefer to use Managed Identity instead,"
echo "  you can remove the *_API_KEY variables from .env"
echo "=================================================="

exit 0
